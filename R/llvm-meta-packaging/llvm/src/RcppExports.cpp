// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_hello_world
Rcpp::List rcpp_hello_world();
RcppExport SEXP _llvm_rcpp_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// trunc_
unsigned long trunc_(Rcpp::String from, long x, Rcpp::String to);
RcppExport SEXP _llvm_trunc_(SEXP fromSEXP, SEXP xSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type from(fromSEXP);
    Rcpp::traits::input_parameter< long >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(trunc_(from, x, to));
    return rcpp_result_gen;
END_RCPP
}
// lshr
unsigned long lshr(Rcpp::String type, unsigned long x, long y);
RcppExport SEXP _llvm_lshr(SEXP typeSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type x(xSEXP);
    Rcpp::traits::input_parameter< long >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(lshr(type, x, y));
    return rcpp_result_gen;
END_RCPP
}
// ashr
long ashr(Rcpp::String type, long x, long y);
RcppExport SEXP _llvm_ashr(SEXP typeSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< long >::type x(xSEXP);
    Rcpp::traits::input_parameter< long >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(ashr(type, x, y));
    return rcpp_result_gen;
END_RCPP
}
// shl
long shl(Rcpp::String type, long x, long y);
RcppExport SEXP _llvm_shl(SEXP typeSEXP, SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< long >::type x(xSEXP);
    Rcpp::traits::input_parameter< long >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(shl(type, x, y));
    return rcpp_result_gen;
END_RCPP
}
// and_
long and_(long x, long y);
RcppExport SEXP _llvm_and_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< long >::type x(xSEXP);
    Rcpp::traits::input_parameter< long >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(and_(x, y));
    return rcpp_result_gen;
END_RCPP
}
// or_
long or_(long x, long y);
RcppExport SEXP _llvm_or_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< long >::type x(xSEXP);
    Rcpp::traits::input_parameter< long >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(or_(x, y));
    return rcpp_result_gen;
END_RCPP
}
// xor_
long xor_(long x, long y);
RcppExport SEXP _llvm_xor_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< long >::type x(xSEXP);
    Rcpp::traits::input_parameter< long >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(xor_(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fptosi
long fptosi(Rcpp::String from, double x, Rcpp::String to);
RcppExport SEXP _llvm_fptosi(SEXP fromSEXP, SEXP xSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type from(fromSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(fptosi(from, x, to));
    return rcpp_result_gen;
END_RCPP
}
// fptoui
unsigned long fptoui(Rcpp::String from, double x, Rcpp::String to);
RcppExport SEXP _llvm_fptoui(SEXP fromSEXP, SEXP xSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type from(fromSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(fptoui(from, x, to));
    return rcpp_result_gen;
END_RCPP
}
// uitofp
double uitofp(Rcpp::String from, unsigned long x, Rcpp::String to);
RcppExport SEXP _llvm_uitofp(SEXP fromSEXP, SEXP xSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type from(fromSEXP);
    Rcpp::traits::input_parameter< unsigned long >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(uitofp(from, x, to));
    return rcpp_result_gen;
END_RCPP
}
// sitofp
double sitofp(Rcpp::String from, long x, Rcpp::String to);
RcppExport SEXP _llvm_sitofp(SEXP fromSEXP, SEXP xSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type from(fromSEXP);
    Rcpp::traits::input_parameter< long >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(sitofp(from, x, to));
    return rcpp_result_gen;
END_RCPP
}
// sext
long sext(Rcpp::String from, long x, Rcpp::String to);
RcppExport SEXP _llvm_sext(SEXP fromSEXP, SEXP xSEXP, SEXP toSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type from(fromSEXP);
    Rcpp::traits::input_parameter< long >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type to(toSEXP);
    rcpp_result_gen = Rcpp::wrap(sext(from, x, to));
    return rcpp_result_gen;
END_RCPP
}
// inc
int inc();
RcppExport SEXP _llvm_inc() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(inc());
    return rcpp_result_gen;
END_RCPP
}
// my_norm
Rcpp::S4 my_norm(double mean, double sd);
RcppExport SEXP _llvm_my_norm(SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(my_norm(mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// store
void store(Rcpp::String name, Rcpp::RObject object);
RcppExport SEXP _llvm_store(SEXP nameSEXP, SEXP objectSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type name(nameSEXP);
    Rcpp::traits::input_parameter< Rcpp::RObject >::type object(objectSEXP);
    store(name, object);
    return R_NilValue;
END_RCPP
}
// load
Rcpp::RObject load(Rcpp::String name);
RcppExport SEXP _llvm_load(SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::String >::type name(nameSEXP);
    rcpp_result_gen = Rcpp::wrap(load(name));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_package_function
Rcpp::S4 rcpp_package_function(Rcpp::NumericMatrix m);
RcppExport SEXP _llvm_rcpp_package_function(SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_package_function(m));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_type
void rcpp_type(Rcpp::RObject x);
RcppExport SEXP _llvm_rcpp_type(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type x(xSEXP);
    rcpp_type(x);
    return R_NilValue;
END_RCPP
}
// say_hello
Rcpp::RObject say_hello(Rcpp::RObject x);
RcppExport SEXP _llvm_say_hello(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::RObject >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(say_hello(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_llvm_rcpp_hello_world", (DL_FUNC) &_llvm_rcpp_hello_world, 0},
    {"_llvm_trunc_", (DL_FUNC) &_llvm_trunc_, 3},
    {"_llvm_lshr", (DL_FUNC) &_llvm_lshr, 3},
    {"_llvm_ashr", (DL_FUNC) &_llvm_ashr, 3},
    {"_llvm_shl", (DL_FUNC) &_llvm_shl, 3},
    {"_llvm_and_", (DL_FUNC) &_llvm_and_, 2},
    {"_llvm_or_", (DL_FUNC) &_llvm_or_, 2},
    {"_llvm_xor_", (DL_FUNC) &_llvm_xor_, 2},
    {"_llvm_fptosi", (DL_FUNC) &_llvm_fptosi, 3},
    {"_llvm_fptoui", (DL_FUNC) &_llvm_fptoui, 3},
    {"_llvm_uitofp", (DL_FUNC) &_llvm_uitofp, 3},
    {"_llvm_sitofp", (DL_FUNC) &_llvm_sitofp, 3},
    {"_llvm_sext", (DL_FUNC) &_llvm_sext, 3},
    {"_llvm_inc", (DL_FUNC) &_llvm_inc, 0},
    {"_llvm_my_norm", (DL_FUNC) &_llvm_my_norm, 2},
    {"_llvm_store", (DL_FUNC) &_llvm_store, 2},
    {"_llvm_load", (DL_FUNC) &_llvm_load, 1},
    {"_llvm_rcpp_package_function", (DL_FUNC) &_llvm_rcpp_package_function, 1},
    {"_llvm_rcpp_type", (DL_FUNC) &_llvm_rcpp_type, 1},
    {"_llvm_say_hello", (DL_FUNC) &_llvm_say_hello, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_llvm(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
